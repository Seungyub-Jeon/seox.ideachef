# Task ID: 14
# Title: Task #14: Structured Data Analysis Module Development
# Status: done
# Dependencies: 1, 3
# Priority: medium
# Description: Develop a module to detect, validate, and analyze Schema.org markup in JSON-LD, Microdata, and RDFa formats, providing comprehensive structured data analysis for SEO optimization.
# Details:
This task involves implementing a structured data analysis module as specified in section 1.5 of the PRD. The module should:

1. Detect the presence of structured data in three formats:
   - JSON-LD (script tags with application/ld+json type)
   - Microdata (itemscope, itemtype attributes)
   - RDFa (vocab, typeof attributes)

2. Extract and parse structured data from the page HTML, building a normalized representation regardless of the original format.

3. Validate structured data against Schema.org specifications:
   - Verify required fields are present
   - Check for proper nesting and relationships
   - Validate data types and formats
   - Detect missing recommended properties

4. Implement specialized validators for common schema types:
   - Breadcrumbs
   - FAQs
   - Product information
   - Review markup
   - Organization/LocalBusiness
   - Article/NewsArticle

5. Generate detailed reports including:
   - Errors (missing required fields, invalid values)
   - Warnings (missing recommended fields)
   - Schema-specific recommendations for improvement
   - Visualization of detected structured data

6. Integrate with the existing SEO analysis module (Task #3) to provide a unified analysis report.

7. Ensure the module works within the bookmarklet core structure (Task #1) for seamless page analysis.

Technical considerations:
- Use a modular approach with separate parsers for each format
- Implement a unified validation engine that works across formats
- Consider performance optimization for large pages with extensive markup
- Handle edge cases like multiple schema types on a single page
- Support internationalization for error messages and recommendations

# Test Strategy:
Testing for the structured data analysis module should include:

1. Unit Tests:
   - Create test cases for each parser (JSON-LD, Microdata, RDFa) with valid and invalid examples
   - Test validation logic for each supported schema type
   - Verify error and warning detection with known problematic markup
   - Test edge cases like nested schemas and multiple schema types

2. Integration Tests:
   - Verify integration with the SEO analysis module (Task #3)
   - Test within the bookmarklet core structure (Task #1)
   - Ensure proper data flow between components

3. Real-world Testing:
   - Create a test suite of 20+ real websites with various structured data implementations
   - Include sites with multiple schema types and formats
   - Include examples of both well-formed and problematic structured data
   - Test with very large pages to ensure performance

4. Validation Accuracy:
   - Compare module results with Google's Structured Data Testing Tool and Rich Results Test
   - Ensure all errors detected by Google's tools are also detected by our module
   - Verify recommendations align with current SEO best practices

5. User Acceptance Testing:
   - Verify the module provides clear, actionable feedback
   - Test the visualization component for clarity and usefulness
   - Ensure recommendations are practical and implementable

6. Performance Testing:
   - Measure parsing and analysis time for various page sizes
   - Ensure the module doesn't significantly impact overall bookmarklet performance
   - Optimize if analysis takes more than 2 seconds on average pages

Documentation of test results should include screenshots of the module's output compared to Google's tools for the same pages.

# Subtasks:
## 1. Implement Structured Data Detection and Extraction [done]
### Dependencies: None
### Description: Create parsers to detect and extract structured data in JSON-LD, Microdata, and RDFa formats from HTML pages.
### Details:
Develop three separate parser modules (one for each format) that can identify and extract structured data from HTML. Each parser should: 1) Scan the DOM for format-specific markers, 2) Extract the raw structured data, 3) Convert the data into a normalized internal representation with consistent property naming and structure regardless of the original format. Include helper functions to detect which formats are present on a page. The normalized data structure should preserve the original format type for reference.

## 2. Build Schema.org Validation Engine [done]
### Dependencies: None
### Description: Develop a validation engine that checks extracted structured data against Schema.org specifications and identifies errors and warnings.
### Details:
Create a validation module that: 1) Loads Schema.org type definitions (consider using a library or pre-processed schema definitions), 2) Validates normalized structured data against these definitions, 3) Checks for required properties, proper nesting, correct data types, and recommended properties, 4) Generates detailed validation results with error and warning messages. Implement a flexible validation rule system that can be extended for specific schema types.

## 3. Implement Specialized Schema Type Validators [done]
### Dependencies: None
### Description: Create specialized validators for common schema types including Breadcrumbs, FAQs, Product, Review, Organization/LocalBusiness, and Article/NewsArticle.
### Details:
Extend the base validation engine with specialized validators for each priority schema type. Each specialized validator should: 1) Implement type-specific validation rules beyond the basic Schema.org requirements, 2) Check for SEO best practices specific to that schema type, 3) Generate schema-specific recommendations for improvement. Create a registry system to map schema types to their specialized validators.

## 4. Develop Structured Data Analysis Reporting [done]
### Dependencies: None
### Description: Create a reporting module that generates detailed analysis reports from validation results, including errors, warnings, and recommendations.
### Details:
Implement a reporting module that: 1) Processes validation results from both the base validator and specialized validators, 2) Organizes findings into categories (errors, warnings, recommendations), 3) Generates human-readable explanations for each issue, 4) Provides actionable recommendations for fixing problems, 5) Creates a visual representation of the structured data hierarchy. Include severity ratings and prioritized recommendations.

## 5. Integrate with SEO Analysis Module and Bookmarklet Core [done]
### Dependencies: None
### Description: Integrate the structured data analysis module with the existing SEO analysis module and ensure compatibility with the bookmarklet core structure.
### Details:
1) Create an integration layer between the structured data module and the SEO analysis module (Task #3), 2) Ensure structured data findings are incorporated into the unified SEO report, 3) Adapt the module to work within the bookmarklet core architecture (Task #1), 4) Implement performance optimizations for large pages with extensive markup, 5) Add configuration options for controlling analysis depth and report detail. Handle edge cases like multiple schema types on a single page and internationalization for messages.

